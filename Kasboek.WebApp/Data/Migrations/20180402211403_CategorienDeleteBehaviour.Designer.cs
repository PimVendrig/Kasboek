// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using System;

namespace Kasboek.WebApp.Data.Migrations
{
    [DbContext(typeof(KasboekDbContext))]
    [Migration("20180402211403_CategorienDeleteBehaviour")]
    partial class CategorienDeleteBehaviour
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Kasboek.WebApp.Models.Categorie", b =>
                {
                    b.Property<int>("CategorieId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Omschrijving")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("CategorieId");

                    b.ToTable("Categorieen");
                });

            modelBuilder.Entity("Kasboek.WebApp.Models.Label", b =>
                {
                    b.Property<int>("LabelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Omschrijving")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("LabelId");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("Kasboek.WebApp.Models.Rekening", b =>
                {
                    b.Property<int>("RekeningId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsEigenRekening");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("RekeningNummer")
                        .HasMaxLength(100);

                    b.Property<int?>("StandaardCategorieId");

                    b.HasKey("RekeningId");

                    b.HasIndex("StandaardCategorieId");

                    b.ToTable("Rekeningen");
                });

            modelBuilder.Entity("Kasboek.WebApp.Models.RekeningLabel", b =>
                {
                    b.Property<int>("RekeningId");

                    b.Property<int>("LabelId");

                    b.HasKey("RekeningId", "LabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("RekeningLabels");
                });

            modelBuilder.Entity("Kasboek.WebApp.Models.Transactie", b =>
                {
                    b.Property<int>("TransactieId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Bedrag");

                    b.Property<int?>("CategorieId");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("date");

                    b.Property<int>("NaarRekeningId");

                    b.Property<string>("Omschrijving")
                        .HasMaxLength(1000);

                    b.Property<int>("VanRekeningId");

                    b.HasKey("TransactieId");

                    b.HasIndex("CategorieId");

                    b.HasIndex("NaarRekeningId");

                    b.HasIndex("VanRekeningId");

                    b.ToTable("Transacties");
                });

            modelBuilder.Entity("Kasboek.WebApp.Models.TransactieLabel", b =>
                {
                    b.Property<int>("TransactieId");

                    b.Property<int>("LabelId");

                    b.HasKey("TransactieId", "LabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("TransactieLabels");
                });

            modelBuilder.Entity("Kasboek.WebApp.Models.Rekening", b =>
                {
                    b.HasOne("Kasboek.WebApp.Models.Categorie", "StandaardCategorie")
                        .WithMany("Rekeningen")
                        .HasForeignKey("StandaardCategorieId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Kasboek.WebApp.Models.RekeningLabel", b =>
                {
                    b.HasOne("Kasboek.WebApp.Models.Label", "Label")
                        .WithMany("RekeningLabels")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kasboek.WebApp.Models.Rekening", "Rekening")
                        .WithMany("RekeningLabels")
                        .HasForeignKey("RekeningId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kasboek.WebApp.Models.Transactie", b =>
                {
                    b.HasOne("Kasboek.WebApp.Models.Categorie", "Categorie")
                        .WithMany("Transacties")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Kasboek.WebApp.Models.Rekening", "NaarRekening")
                        .WithMany("NaarTransacties")
                        .HasForeignKey("NaarRekeningId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Kasboek.WebApp.Models.Rekening", "VanRekening")
                        .WithMany("VanTransacties")
                        .HasForeignKey("VanRekeningId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Kasboek.WebApp.Models.TransactieLabel", b =>
                {
                    b.HasOne("Kasboek.WebApp.Models.Label", "Label")
                        .WithMany("TransactieLabels")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kasboek.WebApp.Models.Transactie", "Transactie")
                        .WithMany("TransactieLabels")
                        .HasForeignKey("TransactieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
